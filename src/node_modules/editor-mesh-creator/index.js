import Vertices from 'editor-vertices'
import isObject from 'lodash/isObject'

let app = editor.call('viewport:app')

function MeshCreator() {
    let root
    let nodes = []
    let parents = []
    let vertices = []
    let createdMeshes = []
    let meshInstances = []
    let skins = []

    let output = {
        model: {
            version: 2,
            nodes: nodes,
            parents: parents,
            skins: skins,
            vertices: vertices,
            meshes: createdMeshes,
            meshInstances: meshInstances
        }
    }


    function findId(material) {
        let loadedMaterials = app.assets.filter(function (asset) {
            return asset.type === 'material' && asset.resource
        })
        return loadedMaterials.filter(function (m) {
            return m.resource === material
        })[0]._id
    }

    this.findId = findId

    function createNode(name, parent, position, rotation, scale) {
        position = position || [0, 0, 0]
        rotation = rotation || [0, 0, 0]
        scale = scale || [1, 1, 1]
        position = position instanceof pc.Vec3 ? Array.from(position.data).map(v=>Math.round(v*1000)/1000) : position
        rotation = rotation instanceof pc.Vec3 ? Array.from(rotation.data).map(v => Math.round(v * 1000) / 1000) : rotation
        scale = scale instanceof pc.Vec3 ? Array.from(scale.data).map(v => Math.round(v * 1000) / 1000) : scale
        parent = parent == undefined ?  (parent===null ? undefined : root) : parent
        let node = {
            name: name,
            position: position,
            rotation: rotation,
            scale: scale
        }
        parent = parent !== undefined ? parent : -1
        if (isObject(parent)) {
            parent = parent.$id !== undefined ? parent.$id : nodes.indexOf(parent)
        }
        nodes.push(node)
        node.$id = nodes.length - 1
        parents.push(parent)
        return node
    }

    this.createNode = createNode

    function createVertices() {
        let vertexList = new Vertices()
        vertices.push(vertexList)
        vertexList.$id = vertices.length - 1
        return vertexList
    }

    this.createVertices = createVertices

    function createMesh() {
        let mesh = {
            aabb: {
                min: [0, 0, 0],
                max: [0, 0, 0]
            },
            vertices: 0,
            indices: [],
            type: 'triangles',
            base: 0,
            count: 0,
            skin: skins.length
        }
        createdMeshes.push(mesh)
        mesh.$id = createdMeshes.length - 1
        return mesh
    }

    this.createMesh = createMesh

    function createMeshInstance(node, mesh) {
        if (isObject(node)) {
            node = node.$id !== undefined ? node.$id : nodes.indexOf(node)
        }
        if (isObject(mesh)) {
            mesh = mesh.$id !== undefined ? mesh.$id : createdMeshes.indexOf(mesh)
        }
        let instance = {
            node: node,
            mesh: mesh
        }
        meshInstances.push(instance)
        instance.$id = meshInstances.length - 1
        return instance
    }

    this.createMeshInstance = createMeshInstance

    //Combine
    root = this.root = createNode('RootNode', null)
    this.materials = []
    this.meshes = [];
    this.skins = skins

    this.getModel = function () {
        return JSON.stringify(output, function (key, value) {
            return key.slice(0, 1) === '$' ? undefined : value
        })
    }


}

export default MeshCreator

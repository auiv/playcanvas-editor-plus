function Vertices(args) {
    args = args || {}
    Object.assign(this, {
        position: {
            type: 'float32',
            components: 3,
            data: []
        },
        normal: {
            type: 'float32',
            components: 3,
            data: []
        },
        texCoord0: {
            type: 'float32',
            components: 2,
            data: []
        },
        texCoord1: {
            type: 'float32',
            components: 2,
            data: []
        },
        blendWeight: {
            type: 'float32',
            components: 4,
            data: []
        },
        blendIndices: {
            type: 'uint8',
            components: 4,
            data: []
        },
        color: {
            type: 'float32',
            components: 4,
            data: []
        }
    }, args)
    Object.assign(this, args)
}

Vertices.prototype.addPosition = function (x, y, z) {
    if (Array.isArray(x)) {
        this.position.data.push.apply(this.position.data, x)
    } else if (isObject(x)) {
        this.position.data.push(x.x, x.y, x.z)
    } else {
        this.position.data.push(x, y, z)
    }
}

Vertices.prototype.addNormal = function (x, y, z) {
    if (Array.isArray(x)) {
        this.normal.data.push.apply(this.normal.data, x)
    } else if (isObject(x)) {
        this.normal.data.push(x.x, x.y, x.z)
    } else {
        this.normal.data.push(x, y, z)
    }
}

Vertices.prototype.addTex0 = function (x, y) {
    if (Array.isArray(x)) {
        this.texCoord0.data.push.apply(this.texCoord0.data, x)
    } else if (isObject(x)) {
        this.texCoord0.data.push(x.x, x.y)
    } else {
        this.texCoord0.data.push(x, y)
    }
}

Vertices.prototype.addTex1 = function (x, y) {
    if (Array.isArray(x)) {
        this.texCoord1.data.push.apply(this.texCoord1.data, x)
    } else if (isObject(x)) {
        this.texCoord1.data.push(x.x, x.y)
    } else {
        this.texCoord1.data.push(x, y)
    }
}
Vertices.prototype.addBlendWeight = function (x, y, z, w) {
    if (Array.isArray(x)) {
        this.blendWeight.data.push.apply(this.blendWeights.data, x)
    } else if (isObject(x)) {
        this.texCoord1.data.push(x.x, x.y, x.z, x.w)
    } else {
        this.texCoord1.data.push(x, y, z, w)
    }
}
Vertices.prototype.addBlendIndex = function (x, y, z, w) {
    if (Array.isArray(x)) {
        this.texCoord1.data.push.apply(this.blendIndices.data, x)
    } else if (isObject(x)) {
        this.texCoord1.data.push(x.x, x.y, x.z, x.w)
    } else {
        this.texCoord1.data.push(x, y, z, w)
    }
}

Vertices.prototype.add = function (position, normal, uv0, uv1, blendWeight, blendIndex) {
    if (position) {
        this.addPosition(position)
    }
    if (normal) {
        this.addNormal(normal)
    }
    if (uv0) {
        this.addTex0(uv0)
    }
    if (uv1) {
        this.addTex1(uv1)
    }
    if (blendWeight) {
        this.addBlendWeight(blendWeight)
    }
    if (blendIndex) {
        this.addBlendIndex(blendIndex)
    }
}

export default Vertices
